name: QA CICD Asset Bundle Pipeline

on:
  push:
    branches:
      - qa

jobs:
  validate:
    name: "QA Validate Databricks Bundle"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          cd dab_trips
          pip install -r requirements-dev.txt

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Validate Databricks bundle
        run: |
          cd dab_trips
          ENV="${{ github.event.inputs.env || 'dev' }}"
          echo "Environment: $ENV"
          databricks bundle validate --target=qa
        env:
          DATABRICKS_BUNDLE_ENV: qa
          DATABRICKS_HOST: ${{ secrets.QA_DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
  
  deploy:
    name: "Deploy to QA"
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.result == 'success'

    steps:
      - uses: actions/checkout@v3

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Deploy bundle to Databricks
        run: |
          cd dab_trips
          ENV="${{ github.event.inputs.env || 'dev' }}"
          echo "Environment: $ENV"
          databricks bundle deploy --target=qa --auto-approve
        env:
          DATABRICKS_BUNDLE_ENV: qa
          DATABRICKS_HOST: ${{ secrets.QA_DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
